metadata.format.version = "1.1"

[versions]
minimessage = "4.24.0"
classgraph = "4.8.181"
configurate = "4.2.0"
dependencydownload = "1.3.1"
gson = "2.13.1"
guava = "33.4.8-jre"
jedis = "6.1.0"
minestom = "2025.08.18-1.21.8"
jnats = "2.21.5"
jooq = "3.20.6"
log4j = "2.25.1"
minestompvp = "-SNAPSHOT"
mysql = "9.4.0"
okhttp = "5.1.0"
opentelemetry = "1.53.0"
polar = "1.14.7"
stomui = "1.0.3"
reflections = "0.10.2"
lombokwarningfix = "4.0.2"

[libraries]
minestom = { module = "net.minestom:minestom", version.ref = "minestom" }
gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
polar = { module = "dev.hollowcube:polar", version.ref = "polar" }
jedis = { module = "redis.clients:jedis", version.ref = "jedis" }
guava = { module = "com.google.guava:guava", version.ref = "guava" }
minestompvp = { module = "com.github.TogAr2:MinestomPvP", version.ref = "minestompvp" }
stomui = { module = "eu.koboo:stomui", version.ref = "stomui" }
configurate = { module = "org.spongepowered:configurate-gson", version.ref = "configurate" }
classgraph = { module = "io.github.classgraph:classgraph", version.ref = "classgraph" }
minimessage = { module = "net.kyori:adventure-text-minimessage", version.ref = "minimessage" }
mysql = { module = "com.mysql:mysql-connector-j", version.ref = "mysql" }
reflections = { module = "org.reflections:reflections", version.ref = "reflections" }
log4j-core = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4j" }
log4j-slf4j2-impl = { module = "org.apache.logging.log4j:log4j-slf4j2-impl", version.ref = "log4j" }
jnats = { module = "io.nats:jnats", version.ref = "jnats" }
jooq = { module = "org.jooq:jooq", version.ref = "jooq" }
lombokwarningfix = { module = "jakarta.xml.bind:jakarta.xml.bind-api", version.ref = "lombokwarningfix" }
opentelemetry-api = { module = "io.opentelemetry:opentelemetry-api", version.ref = "opentelemetry" }
opentelemetry-sdk = { module = "io.opentelemetry:opentelemetry-sdk", version.ref = "opentelemetry" }
opentelemetry-exporter-otlp = { module = "io.opentelemetry:opentelemetry-exporter-otlp", version.ref = "opentelemetry" }
dependencydownload = { module = "dev.vankka:dependencydownload-runtime", version.ref = "dependencydownload" }

[bundles]
log4j = ["log4j-core", "log4j-slf4j2-impl"]
otel = ["opentelemetry-api", "opentelemetry-sdk", "opentelemetry-exporter-otlp"]